// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QM.DataAccess.Concrete.EntityFrameworkCore.Context;

namespace QM.DataAccess.Migrations
{
    [DbContext(typeof(ArlentusBIContext))]
    [Migration("20220815124037_upadate10")]
    partial class upadate10
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("QM.Entities.Concrete.Documents.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<string>("FormType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("QM.Entities.Concrete.FinalQualities.FQControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Control0")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control11")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control12")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control13")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control8")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control9")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FinalQualityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RevisionNo")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status0")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status11")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status12")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status13")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status8")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status9")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FinalQualityId");

                    b.ToTable("FQControls");
                });

            modelBuilder.Entity("QM.Entities.Concrete.FinalQualities.FQControl2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Control14")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control15")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control16")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control17")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control18")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control19")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control20")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control21")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control22")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control23")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control24")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control25")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control26")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control27")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control28")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control29")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control30")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control31")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control32")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control33")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control34")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control35")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control36")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FinalQualityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RevisionNo")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status14")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status15")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status16")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status17")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status18")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status19")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status20")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status21")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status22")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status23")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status24")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status25")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status26")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status27")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status28")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status29")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status30")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status31")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status32")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status33")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status34")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status35")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status36")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FinalQualityId");

                    b.ToTable("FQControls2");
                });

            modelBuilder.Entity("QM.Entities.Concrete.FinalQualities.FQControlBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CloseControlSaved")
                        .HasColumnType("bit");

                    b.Property<bool>("CloseControlSuccess")
                        .HasColumnType("bit");

                    b.Property<int>("FinalQualityId")
                        .HasColumnType("int");

                    b.Property<bool>("ManualControlSaved")
                        .HasColumnType("bit");

                    b.Property<bool>("ManualControlSuccess")
                        .HasColumnType("bit");

                    b.Property<bool>("OpenControlSaved")
                        .HasColumnType("bit");

                    b.Property<bool>("OpenControlSuccess")
                        .HasColumnType("bit");

                    b.Property<bool>("PackageControlSaved")
                        .HasColumnType("bit");

                    b.Property<bool>("PackageControlSuccess")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("FQControlBase");
                });

            modelBuilder.Entity("QM.Entities.Concrete.FinalQualities.FinalQuality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AcceptanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovalBy")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Customer")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EngineersNote")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LotStatus")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("MaterialCode")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("Permit")
                        .HasColumnType("bit");

                    b.Property<string>("ProductSerialNo")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ProjectResponsibleId")
                        .HasColumnType("int");

                    b.Property<string>("QONote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QualityOfficerId")
                        .HasColumnType("int");

                    b.Property<int>("QualityTechnicianId")
                        .HasColumnType("int");

                    b.Property<string>("Signature")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("StationNo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("StatusFQC1")
                        .HasColumnType("int");

                    b.Property<int>("StatusFQC2")
                        .HasColumnType("int");

                    b.Property<int>("StatusFQMC")
                        .HasColumnType("int");

                    b.Property<int>("StatusFQPC")
                        .HasColumnType("int");

                    b.Property<int>("StatusM")
                        .HasColumnType("int");

                    b.Property<int>("StatusQO")
                        .HasColumnType("int");

                    b.Property<string>("TMNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TechnicianName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TestNo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int");

                    b.Property<string>("WorkOrderNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectResponsibleId");

                    b.HasIndex("QualityOfficerId");

                    b.HasIndex("QualityTechnicianId");

                    b.ToTable("FinalQualities");
                });

            modelBuilder.Entity("QM.Entities.Concrete.Issues.Issue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssigneeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EstimateFinishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Explain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IssueType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Prediction")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("RepeatFrrequency")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("QM.Entities.Concrete.Notifications.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Explain")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("FinalQualityId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("WorkOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FinalQualityId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("QM.Entities.Concrete.Notifications.UserNotification", b =>
                {
                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("AppUserId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("QM.Entities.Concrete.Users.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("QM.Entities.Concrete.Users.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("QM.Entities.Concrete.WorkOrders.ManuelScenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Entry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Explain")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int");

                    b.Property<string>("manualControlStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("ManuelScenarios");
                });

            modelBuilder.Entity("QM.Entities.Concrete.WorkOrders.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ProductModel")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ProductSerialCode")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("QM.Entities.Concrete.WorkOrders.WorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LotStatus")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("MontageTechnicianId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1100)
                        .HasColumnType("nvarchar(1100)");

                    b.Property<DateTime>("PlannedFinishedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PlannedStartingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectCode")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ProjectCreatorId")
                        .HasColumnType("int");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<int>("QualityOfficerId")
                        .HasColumnType("int");

                    b.Property<int>("QualityTechnicianId")
                        .HasColumnType("int");

                    b.Property<int>("ResponsibleId")
                        .HasColumnType("int");

                    b.Property<int>("RevisionNo")
                        .HasColumnType("int");

                    b.Property<string>("SalesOrderCode")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("StartingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("StationNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TestNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("WorkOrderNo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("MontageTechnicianId");

                    b.HasIndex("ProjectCreatorId");

                    b.HasIndex("QualityOfficerId");

                    b.HasIndex("QualityTechnicianId");

                    b.HasIndex("ResponsibleId");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("QM.Entities.Concrete.Users.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("QM.Entities.Concrete.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("QM.Entities.Concrete.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("QM.Entities.Concrete.Users.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QM.Entities.Concrete.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("QM.Entities.Concrete.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QM.Entities.Concrete.FinalQualities.FQControl", b =>
                {
                    b.HasOne("QM.Entities.Concrete.FinalQualities.FinalQuality", "FinalQuality")
                        .WithMany("FQControls")
                        .HasForeignKey("FinalQualityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinalQuality");
                });

            modelBuilder.Entity("QM.Entities.Concrete.FinalQualities.FQControl2", b =>
                {
                    b.HasOne("QM.Entities.Concrete.FinalQualities.FinalQuality", "FinalQuality")
                        .WithMany()
                        .HasForeignKey("FinalQualityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinalQuality");
                });

            modelBuilder.Entity("QM.Entities.Concrete.FinalQualities.FinalQuality", b =>
                {
                    b.HasOne("QM.Entities.Concrete.Users.AppUser", "ProjectResponsibleName")
                        .WithMany("ProjectResponsibleQ")
                        .HasForeignKey("ProjectResponsibleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QM.Entities.Concrete.Users.AppUser", "QualityOfficerName")
                        .WithMany("QualityOfficerQ")
                        .HasForeignKey("QualityOfficerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QM.Entities.Concrete.Users.AppUser", "QualityTechnicianName")
                        .WithMany("QualityTechnicianQ")
                        .HasForeignKey("QualityTechnicianId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectResponsibleName");

                    b.Navigation("QualityOfficerName");

                    b.Navigation("QualityTechnicianName");
                });

            modelBuilder.Entity("QM.Entities.Concrete.Issues.Issue", b =>
                {
                    b.HasOne("QM.Entities.Concrete.Users.AppUser", "AssigneeName")
                        .WithMany("AssigneeI")
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QM.Entities.Concrete.Users.AppUser", "CreatorName")
                        .WithMany("CreatorI")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssigneeName");

                    b.Navigation("CreatorName");
                });

            modelBuilder.Entity("QM.Entities.Concrete.Notifications.Notification", b =>
                {
                    b.HasOne("QM.Entities.Concrete.FinalQualities.FinalQuality", "FinalQuality")
                        .WithMany("Notifications")
                        .HasForeignKey("FinalQualityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QM.Entities.Concrete.WorkOrders.WorkOrder", "WorkOrder")
                        .WithMany("Notifications")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FinalQuality");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("QM.Entities.Concrete.Notifications.UserNotification", b =>
                {
                    b.HasOne("QM.Entities.Concrete.Users.AppUser", "AppUser")
                        .WithMany("UserNotifications")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QM.Entities.Concrete.Notifications.Notification", "Notification")
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("QM.Entities.Concrete.WorkOrders.ManuelScenario", b =>
                {
                    b.HasOne("QM.Entities.Concrete.WorkOrders.WorkOrder", "WorkOrder")
                        .WithMany("ManuelScenarios")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("QM.Entities.Concrete.WorkOrders.Product", b =>
                {
                    b.HasOne("QM.Entities.Concrete.WorkOrders.WorkOrder", "WorkOrder")
                        .WithMany("Products")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("QM.Entities.Concrete.WorkOrders.WorkOrder", b =>
                {
                    b.HasOne("QM.Entities.Concrete.Users.AppUser", "MontageTechnicianName")
                        .WithMany("ProjectStaffs")
                        .HasForeignKey("MontageTechnicianId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QM.Entities.Concrete.Users.AppUser", "ProjectCreator")
                        .WithMany("WorkOrderCreatorW")
                        .HasForeignKey("ProjectCreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QM.Entities.Concrete.Users.AppUser", "QualityOfficerName")
                        .WithMany("QualityOfficerW")
                        .HasForeignKey("QualityOfficerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QM.Entities.Concrete.Users.AppUser", "QualityTechnicianName")
                        .WithMany("QualityTechnicianW")
                        .HasForeignKey("QualityTechnicianId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QM.Entities.Concrete.Users.AppUser", "ResponsibleName")
                        .WithMany("ResponsibleW")
                        .HasForeignKey("ResponsibleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MontageTechnicianName");

                    b.Navigation("ProjectCreator");

                    b.Navigation("QualityOfficerName");

                    b.Navigation("QualityTechnicianName");

                    b.Navigation("ResponsibleName");
                });

            modelBuilder.Entity("QM.Entities.Concrete.FinalQualities.FinalQuality", b =>
                {
                    b.Navigation("FQControls");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("QM.Entities.Concrete.Notifications.Notification", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("QM.Entities.Concrete.Users.AppUser", b =>
                {
                    b.Navigation("AssigneeI");

                    b.Navigation("CreatorI");

                    b.Navigation("ProjectResponsibleQ");

                    b.Navigation("ProjectStaffs");

                    b.Navigation("QualityOfficerQ");

                    b.Navigation("QualityOfficerW");

                    b.Navigation("QualityTechnicianQ");

                    b.Navigation("QualityTechnicianW");

                    b.Navigation("ResponsibleW");

                    b.Navigation("UserNotifications");

                    b.Navigation("WorkOrderCreatorW");
                });

            modelBuilder.Entity("QM.Entities.Concrete.WorkOrders.WorkOrder", b =>
                {
                    b.Navigation("ManuelScenarios");

                    b.Navigation("Notifications");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
